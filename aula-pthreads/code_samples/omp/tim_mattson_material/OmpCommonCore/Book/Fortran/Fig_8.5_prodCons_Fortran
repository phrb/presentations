integer :: flag    ! a flag to communicate when the consumer can start
integer :: id, nthrds
flag = 0 
   
!$omp parallel shared(A, flag) private(id, nthrds)
    id = omp_get_thread_num()
    nthrds = omp_get_num_threads()
     
   ! we need two or more threads for this program
   if ((id == 0) .and. (nthrds < 2)) stop 1
     
   if (id == 0) then
      call produce(A)
      flag = 1
   endif 
   if (id == 1) then 
      do while (flag == 0) 
         ! spin through the loop waiting for flag to change
      enddo
   call consume (A)
   endif
!$omp end parallel
