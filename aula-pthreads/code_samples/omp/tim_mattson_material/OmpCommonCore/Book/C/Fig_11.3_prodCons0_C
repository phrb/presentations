int flag = 0;  // a flag to communicate when the consumer can start
omp_set_num_threads(2);
   
#pragma omp parallel shared(A, flag)
{
   int id = omp_get_thread_num();
   int nthrds = omp_get_num_threads();
     
   // we need two or more threads for this program
   if ((id == 0) && (nthrds < 2)) exit(-1);
     
   if (id == 0) {
      produce(A);
      flag = 1;
   }
   if (id == 1) {
      while (flag == 0) {
         // spin through the loop waiting for flag to change
      }
      consume(A);
   }
}
